package com.fisincorporated.languagetutorial.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.fisincorporated.languagetutorial.db.LanguagePhrase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LANGUAGE_PHRASE.
*/
public class LanguagePhraseDao extends AbstractDao<LanguagePhrase, Long> {

    public static final String TABLENAME = "LANGUAGE_PHRASE";

    /**
     * Properties of entity LanguagePhrase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TeacherId = new Property(1, long.class, "teacherId", false, "TEACHER_ID");
        public final static Property LanguageId = new Property(2, long.class, "languageId", false, "LANGUAGE_ID");
        public final static Property WrittenPhrase = new Property(3, String.class, "writtenPhrase", false, "WRITTEN_PHRASE");
        public final static Property AudioFile = new Property(4, String.class, "audioFile", false, "AUDIO_FILE");
        public final static Property VideoFile = new Property(5, String.class, "videoFile", false, "VIDEO_FILE");
        public final static Property PhraseType = new Property(6, String.class, "phraseType", false, "PHRASE_TYPE");
        public final static Property Pronunciation = new Property(7, String.class, "pronunciation", false, "PRONUNCIATION");
        public final static Property EnglishNumeral = new Property(8, String.class, "englishNumeral", false, "ENGLISH_NUMERAL");
        public final static Property CompoundPhraseId = new Property(9, Long.class, "compoundPhraseId", false, "COMPOUND_PHRASE_ID");
    };

    private DaoSession daoSession;

    private Query<LanguagePhrase> teacher_TeachertoManyLanguagePhrasesQuery;

    public LanguagePhraseDao(DaoConfig config) {
        super(config);
    }
    
    public LanguagePhraseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LANGUAGE_PHRASE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TEACHER_ID' INTEGER NOT NULL ," + // 1: teacherId
                "'LANGUAGE_ID' INTEGER NOT NULL ," + // 2: languageId
                "'WRITTEN_PHRASE' TEXT NOT NULL ," + // 3: writtenPhrase
                "'AUDIO_FILE' TEXT," + // 4: audioFile
                "'VIDEO_FILE' TEXT," + // 5: videoFile
                "'PHRASE_TYPE' TEXT NOT NULL ," + // 6: phraseType
                "'PRONUNCIATION' TEXT," + // 7: pronunciation
                "'ENGLISH_NUMERAL' TEXT," + // 8: englishNumeral
                "'COMPOUND_PHRASE_ID' INTEGER);"); // 9: compoundPhraseId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_LANGUAGE_PHRASE_LANGUAGE_ID ON LANGUAGE_PHRASE" +
                " (LANGUAGE_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_LANGUAGE_PHRASE_TEACHER_ID_LANGUAGE_ID_WRITTEN_PHRASE ON LANGUAGE_PHRASE" +
                " (TEACHER_ID,LANGUAGE_ID,WRITTEN_PHRASE);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LANGUAGE_PHRASE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LanguagePhrase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTeacherId());
        stmt.bindLong(3, entity.getLanguageId());
        stmt.bindString(4, entity.getWrittenPhrase());
 
        String audioFile = entity.getAudioFile();
        if (audioFile != null) {
            stmt.bindString(5, audioFile);
        }
 
        String videoFile = entity.getVideoFile();
        if (videoFile != null) {
            stmt.bindString(6, videoFile);
        }
        stmt.bindString(7, entity.getPhraseType());
 
        String pronunciation = entity.getPronunciation();
        if (pronunciation != null) {
            stmt.bindString(8, pronunciation);
        }
 
        String englishNumeral = entity.getEnglishNumeral();
        if (englishNumeral != null) {
            stmt.bindString(9, englishNumeral);
        }
 
        Long compoundPhraseId = entity.getCompoundPhraseId();
        if (compoundPhraseId != null) {
            stmt.bindLong(10, compoundPhraseId);
        }
    }

    @Override
    protected void attachEntity(LanguagePhrase entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LanguagePhrase readEntity(Cursor cursor, int offset) {
        LanguagePhrase entity = new LanguagePhrase( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // teacherId
            cursor.getLong(offset + 2), // languageId
            cursor.getString(offset + 3), // writtenPhrase
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // audioFile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // videoFile
            cursor.getString(offset + 6), // phraseType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pronunciation
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // englishNumeral
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // compoundPhraseId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LanguagePhrase entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTeacherId(cursor.getLong(offset + 1));
        entity.setLanguageId(cursor.getLong(offset + 2));
        entity.setWrittenPhrase(cursor.getString(offset + 3));
        entity.setAudioFile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideoFile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhraseType(cursor.getString(offset + 6));
        entity.setPronunciation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEnglishNumeral(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCompoundPhraseId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LanguagePhrase entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LanguagePhrase entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "teachertoManyLanguagePhrases" to-many relationship of Teacher. */
    public List<LanguagePhrase> _queryTeacher_TeachertoManyLanguagePhrases(long teacherId) {
        synchronized (this) {
            if (teacher_TeachertoManyLanguagePhrasesQuery == null) {
                QueryBuilder<LanguagePhrase> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TeacherId.eq(null));
                teacher_TeachertoManyLanguagePhrasesQuery = queryBuilder.build();
            }
        }
        Query<LanguagePhrase> query = teacher_TeachertoManyLanguagePhrasesQuery.forCurrentThread();
        query.setParameter(0, teacherId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTeacherDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getLanguageCodeDao().getAllColumns());
            builder.append(" FROM LANGUAGE_PHRASE T");
            builder.append(" LEFT JOIN TEACHER T0 ON T.'TEACHER_ID'=T0.'_id'");
            builder.append(" LEFT JOIN LANGUAGE_CODE T1 ON T.'LANGUAGE_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected LanguagePhrase loadCurrentDeep(Cursor cursor, boolean lock) {
        LanguagePhrase entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Teacher languagePhraseToOneTeacher = loadCurrentOther(daoSession.getTeacherDao(), cursor, offset);
         if(languagePhraseToOneTeacher != null) {
            entity.setLanguagePhraseToOneTeacher(languagePhraseToOneTeacher);
        }
        offset += daoSession.getTeacherDao().getAllColumns().length;

        LanguageCode languagePhraseToOneLanguageCode = loadCurrentOther(daoSession.getLanguageCodeDao(), cursor, offset);
         if(languagePhraseToOneLanguageCode != null) {
            entity.setLanguagePhraseToOneLanguageCode(languagePhraseToOneLanguageCode);
        }

        return entity;    
    }

    public LanguagePhrase loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<LanguagePhrase> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<LanguagePhrase> list = new ArrayList<LanguagePhrase>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<LanguagePhrase> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<LanguagePhrase> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
