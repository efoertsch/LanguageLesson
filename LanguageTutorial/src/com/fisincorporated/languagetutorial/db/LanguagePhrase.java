package com.fisincorporated.languagetutorial.db;

import java.util.List;
import com.fisincorporated.languagetutorial.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table LANGUAGE_PHRASE.
 */
public class LanguagePhrase {

    private Long id;
    private long teacherId;
    private long languageId;
    /** Not-null value. */
    private String writtenPhrase;
    private String mediaFile;
    /** Not-null value. */
    private String phraseType;
    private String pronunciation;
    private String englishNumeral;
    private Long compoundPhraseId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LanguagePhraseDao myDao;

    private Teacher languagePhraseToOneTeacher;
    private Long languagePhraseToOneTeacher__resolvedKey;

    private LanguageCode languagePhraseToOneLanguageCode;
    private Long languagePhraseToOneLanguageCode__resolvedKey;

    private List<CompoundPhrase> languagePhraseToManyCompoundPhrases;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public LanguagePhrase() {
    }

    public LanguagePhrase(Long id) {
        this.id = id;
    }

    public LanguagePhrase(Long id, long teacherId, long languageId, String writtenPhrase, String mediaFile, String phraseType, String pronunciation, String englishNumeral, Long compoundPhraseId) {
        this.id = id;
        this.teacherId = teacherId;
        this.languageId = languageId;
        this.writtenPhrase = writtenPhrase;
        this.mediaFile = mediaFile;
        this.phraseType = phraseType;
        this.pronunciation = pronunciation;
        this.englishNumeral = englishNumeral;
        this.compoundPhraseId = compoundPhraseId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLanguagePhraseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getTeacherId() {
        return teacherId;
    }

    public void setTeacherId(long teacherId) {
        this.teacherId = teacherId;
    }

    public long getLanguageId() {
        return languageId;
    }

    public void setLanguageId(long languageId) {
        this.languageId = languageId;
    }

    /** Not-null value. */
    public String getWrittenPhrase() {
        return writtenPhrase;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setWrittenPhrase(String writtenPhrase) {
        this.writtenPhrase = writtenPhrase;
    }

    public String getMediaFile() {
        return mediaFile;
    }

    public void setMediaFile(String mediaFile) {
        this.mediaFile = mediaFile;
    }

    /** Not-null value. */
    public String getPhraseType() {
        return phraseType;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPhraseType(String phraseType) {
        this.phraseType = phraseType;
    }

    public String getPronunciation() {
        return pronunciation;
    }

    public void setPronunciation(String pronunciation) {
        this.pronunciation = pronunciation;
    }

    public String getEnglishNumeral() {
        return englishNumeral;
    }

    public void setEnglishNumeral(String englishNumeral) {
        this.englishNumeral = englishNumeral;
    }

    public Long getCompoundPhraseId() {
        return compoundPhraseId;
    }

    public void setCompoundPhraseId(Long compoundPhraseId) {
        this.compoundPhraseId = compoundPhraseId;
    }

    /** To-one relationship, resolved on first access. */
    public Teacher getLanguagePhraseToOneTeacher() {
        long __key = this.teacherId;
        if (languagePhraseToOneTeacher__resolvedKey == null || !languagePhraseToOneTeacher__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeacherDao targetDao = daoSession.getTeacherDao();
            Teacher languagePhraseToOneTeacherNew = targetDao.load(__key);
            synchronized (this) {
                languagePhraseToOneTeacher = languagePhraseToOneTeacherNew;
            	languagePhraseToOneTeacher__resolvedKey = __key;
            }
        }
        return languagePhraseToOneTeacher;
    }

    public void setLanguagePhraseToOneTeacher(Teacher languagePhraseToOneTeacher) {
        if (languagePhraseToOneTeacher == null) {
            throw new DaoException("To-one property 'teacherId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.languagePhraseToOneTeacher = languagePhraseToOneTeacher;
            teacherId = languagePhraseToOneTeacher.getId();
            languagePhraseToOneTeacher__resolvedKey = teacherId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public LanguageCode getLanguagePhraseToOneLanguageCode() {
        long __key = this.languageId;
        if (languagePhraseToOneLanguageCode__resolvedKey == null || !languagePhraseToOneLanguageCode__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguageCodeDao targetDao = daoSession.getLanguageCodeDao();
            LanguageCode languagePhraseToOneLanguageCodeNew = targetDao.load(__key);
            synchronized (this) {
                languagePhraseToOneLanguageCode = languagePhraseToOneLanguageCodeNew;
            	languagePhraseToOneLanguageCode__resolvedKey = __key;
            }
        }
        return languagePhraseToOneLanguageCode;
    }

    public void setLanguagePhraseToOneLanguageCode(LanguageCode languagePhraseToOneLanguageCode) {
        if (languagePhraseToOneLanguageCode == null) {
            throw new DaoException("To-one property 'languageId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.languagePhraseToOneLanguageCode = languagePhraseToOneLanguageCode;
            languageId = languagePhraseToOneLanguageCode.getId();
            languagePhraseToOneLanguageCode__resolvedKey = languageId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CompoundPhrase> getLanguagePhraseToManyCompoundPhrases() {
        if (languagePhraseToManyCompoundPhrases == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CompoundPhraseDao targetDao = daoSession.getCompoundPhraseDao();
            List<CompoundPhrase> languagePhraseToManyCompoundPhrasesNew = targetDao._queryLanguagePhrase_LanguagePhraseToManyCompoundPhrases(id);
            synchronized (this) {
                if(languagePhraseToManyCompoundPhrases == null) {
                    languagePhraseToManyCompoundPhrases = languagePhraseToManyCompoundPhrasesNew;
                }
            }
        }
        return languagePhraseToManyCompoundPhrases;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLanguagePhraseToManyCompoundPhrases() {
        languagePhraseToManyCompoundPhrases = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
