package com.fisincorporated.languagetutorial.db;

import com.fisincorporated.languagetutorial.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table LANGUAGE_XREF.
 */
public class LanguageXref {

    private Long id;
    private long teacherId;
    private long teacherLanguageId;
    private long learningPhraseId;
    private Long knownPhraseId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LanguageXrefDao myDao;

    private Teacher teacher;
    private Long teacher__resolvedKey;

    private LanguagePhrase languageXrefToOneLearningLanguagePhrase;
    private Long languageXrefToOneLearningLanguagePhrase__resolvedKey;

    private LanguagePhrase languageXrefToOneKnownLanguagePhrase;
    private Long languageXrefToOneKnownLanguagePhrase__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public LanguageXref() {
    }

    public LanguageXref(Long id) {
        this.id = id;
    }

    public LanguageXref(Long id, long teacherId, long teacherLanguageId, long learningPhraseId, Long knownPhraseId) {
        this.id = id;
        this.teacherId = teacherId;
        this.teacherLanguageId = teacherLanguageId;
        this.learningPhraseId = learningPhraseId;
        this.knownPhraseId = knownPhraseId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLanguageXrefDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getTeacherId() {
        return teacherId;
    }

    public void setTeacherId(long teacherId) {
        this.teacherId = teacherId;
    }

    public long getTeacherLanguageId() {
        return teacherLanguageId;
    }

    public void setTeacherLanguageId(long teacherLanguageId) {
        this.teacherLanguageId = teacherLanguageId;
    }

    public long getLearningPhraseId() {
        return learningPhraseId;
    }

    public void setLearningPhraseId(long learningPhraseId) {
        this.learningPhraseId = learningPhraseId;
    }

    public Long getKnownPhraseId() {
        return knownPhraseId;
    }

    public void setKnownPhraseId(Long knownPhraseId) {
        this.knownPhraseId = knownPhraseId;
    }

    /** To-one relationship, resolved on first access. */
    public Teacher getTeacher() {
        long __key = this.teacherId;
        if (teacher__resolvedKey == null || !teacher__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeacherDao targetDao = daoSession.getTeacherDao();
            Teacher teacherNew = targetDao.load(__key);
            synchronized (this) {
                teacher = teacherNew;
            	teacher__resolvedKey = __key;
            }
        }
        return teacher;
    }

    public void setTeacher(Teacher teacher) {
        if (teacher == null) {
            throw new DaoException("To-one property 'teacherId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.teacher = teacher;
            teacherId = teacher.getId();
            teacher__resolvedKey = teacherId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public LanguagePhrase getLanguageXrefToOneLearningLanguagePhrase() {
        long __key = this.learningPhraseId;
        if (languageXrefToOneLearningLanguagePhrase__resolvedKey == null || !languageXrefToOneLearningLanguagePhrase__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguagePhraseDao targetDao = daoSession.getLanguagePhraseDao();
            LanguagePhrase languageXrefToOneLearningLanguagePhraseNew = targetDao.load(__key);
            synchronized (this) {
                languageXrefToOneLearningLanguagePhrase = languageXrefToOneLearningLanguagePhraseNew;
            	languageXrefToOneLearningLanguagePhrase__resolvedKey = __key;
            }
        }
        return languageXrefToOneLearningLanguagePhrase;
    }

    public void setLanguageXrefToOneLearningLanguagePhrase(LanguagePhrase languageXrefToOneLearningLanguagePhrase) {
        if (languageXrefToOneLearningLanguagePhrase == null) {
            throw new DaoException("To-one property 'learningPhraseId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.languageXrefToOneLearningLanguagePhrase = languageXrefToOneLearningLanguagePhrase;
            learningPhraseId = languageXrefToOneLearningLanguagePhrase.getId();
            languageXrefToOneLearningLanguagePhrase__resolvedKey = learningPhraseId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public LanguagePhrase getLanguageXrefToOneKnownLanguagePhrase() {
        Long __key = this.knownPhraseId;
        if (languageXrefToOneKnownLanguagePhrase__resolvedKey == null || !languageXrefToOneKnownLanguagePhrase__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguagePhraseDao targetDao = daoSession.getLanguagePhraseDao();
            LanguagePhrase languageXrefToOneKnownLanguagePhraseNew = targetDao.load(__key);
            synchronized (this) {
                languageXrefToOneKnownLanguagePhrase = languageXrefToOneKnownLanguagePhraseNew;
            	languageXrefToOneKnownLanguagePhrase__resolvedKey = __key;
            }
        }
        return languageXrefToOneKnownLanguagePhrase;
    }

    public void setLanguageXrefToOneKnownLanguagePhrase(LanguagePhrase languageXrefToOneKnownLanguagePhrase) {
        synchronized (this) {
            this.languageXrefToOneKnownLanguagePhrase = languageXrefToOneKnownLanguagePhrase;
            knownPhraseId = languageXrefToOneKnownLanguagePhrase == null ? null : languageXrefToOneKnownLanguagePhrase.getId();
            languageXrefToOneKnownLanguagePhrase__resolvedKey = knownPhraseId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
