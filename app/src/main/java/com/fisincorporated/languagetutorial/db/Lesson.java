package com.fisincorporated.languagetutorial.db;

import java.util.List;

import com.fisincorporated.languagetutorial.db.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS


// KEEP INCLUDES - put your custom includes here
import com.fisincorporated.languagetutorial.utility.DomainObject;
// KEEP INCLUDES END
/**
 * Entity mapped to table LESSON.
 */
public class Lesson implements DomainObject {

    private Long id;
    private long classId;
    private int lessonOrder;
    private String lessonTitle;
    private String description;
    private String lessonType;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LessonDao myDao;

    private ClassName className;
    private Long className__resolvedKey;

    private List<LessonPhrase> lessonToManyLessonPhrases;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Lesson() {
    }

    public Lesson(Long id) {
        this.id = id;
    }

    public Lesson(Long id, long classId, int lessonOrder, String lessonTitle, String description, String lessonType) {
        this.id = id;
        this.classId = classId;
        this.lessonOrder = lessonOrder;
        this.lessonTitle = lessonTitle;
        this.description = description;
        this.lessonType = lessonType;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLessonDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getClassId() {
        return classId;
    }

    public void setClassId(long classId) {
        this.classId = classId;
    }

    public int getLessonOrder() {
        return lessonOrder;
    }

    public void setLessonOrder(int lessonOrder) {
        this.lessonOrder = lessonOrder;
    }

    public String getLessonTitle() {
        return lessonTitle;
    }

    public void setLessonTitle(String lessonTitle) {
        this.lessonTitle = lessonTitle;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getLessonType() {
        return lessonType;
    }

    public void setLessonType(String lessonType) {
        this.lessonType = lessonType;
    }

    /** To-one relationship, resolved on first access. */
    public ClassName getClassName() {
        long __key = this.classId;
        if (className__resolvedKey == null || !className__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClassNameDao targetDao = daoSession.getClassNameDao();
            ClassName classNameNew = targetDao.load(__key);
            synchronized (this) {
                className = classNameNew;
            	className__resolvedKey = __key;
            }
        }
        return className;
    }

    public void setClassName(ClassName className) {
        if (className == null) {
            throw new DaoException("To-one property 'classId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.className = className;
            classId = className.getId();
            className__resolvedKey = classId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LessonPhrase> getLessonToManyLessonPhrases() {
        if (lessonToManyLessonPhrases == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LessonPhraseDao targetDao = daoSession.getLessonPhraseDao();
            List<LessonPhrase> lessonToManyLessonPhrasesNew = targetDao._queryLesson_LessonToManyLessonPhrases(id);
            synchronized (this) {
                if(lessonToManyLessonPhrases == null) {
                    lessonToManyLessonPhrases = lessonToManyLessonPhrasesNew;
                }
            }
        }
        return lessonToManyLessonPhrases;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLessonToManyLessonPhrases() {
        lessonToManyLessonPhrases = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public String toString(){
   	 return lessonTitle;
    }
    // KEEP METHODS END

}
