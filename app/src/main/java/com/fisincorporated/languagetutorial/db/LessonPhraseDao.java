package com.fisincorporated.languagetutorial.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.fisincorporated.languagetutorial.db.LessonPhrase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LESSON_PHRASE.
*/
public class LessonPhraseDao extends AbstractDao<LessonPhrase, Long> {

    public static final String TABLENAME = "LESSON_PHRASE";

    /**
     * Properties of entity LessonPhrase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LessonId = new Property(1, long.class, "lessonId", false, "LESSON_ID");
        public final static Property LessonOrder = new Property(2, int.class, "lessonOrder", false, "LESSON_ORDER");
        public final static Property Speaker = new Property(3, int.class, "speaker", false, "SPEAKER");
        public final static Property LanguageXrefId = new Property(4, long.class, "languageXrefId", false, "LANGUAGE_XREF_ID");
        public final static Property PhraseInterval = new Property(5, float.class, "phraseInterval", false, "PHRASE_INTERVAL");
    };

    private DaoSession daoSession;

    private Query<LessonPhrase> lesson_LessonToManyLessonPhrasesQuery;

    public LessonPhraseDao(DaoConfig config) {
        super(config);
    }
    
    public LessonPhraseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LESSON_PHRASE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'LESSON_ID' INTEGER NOT NULL ," + // 1: lessonId
                "'LESSON_ORDER' INTEGER NOT NULL ," + // 2: lessonOrder
                "'SPEAKER' INTEGER NOT NULL ," + // 3: speaker
                "'LANGUAGE_XREF_ID' INTEGER NOT NULL ," + // 4: languageXrefId
                "'PHRASE_INTERVAL' REAL NOT NULL );"); // 5: phraseInterval
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_LESSON_PHRASE_LESSON_ID_LESSON_ORDER ON LESSON_PHRASE" +
                " (LESSON_ID,LESSON_ORDER);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LESSON_PHRASE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LessonPhrase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLessonId());
        stmt.bindLong(3, entity.getLessonOrder());
        stmt.bindLong(4, entity.getSpeaker());
        stmt.bindLong(5, entity.getLanguageXrefId());
        stmt.bindDouble(6, entity.getPhraseInterval());
    }

    @Override
    protected void attachEntity(LessonPhrase entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LessonPhrase readEntity(Cursor cursor, int offset) {
        LessonPhrase entity = new LessonPhrase( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // lessonId
            cursor.getInt(offset + 2), // lessonOrder
            cursor.getInt(offset + 3), // speaker
            cursor.getLong(offset + 4), // languageXrefId
            cursor.getFloat(offset + 5) // phraseInterval
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LessonPhrase entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLessonId(cursor.getLong(offset + 1));
        entity.setLessonOrder(cursor.getInt(offset + 2));
        entity.setSpeaker(cursor.getInt(offset + 3));
        entity.setLanguageXrefId(cursor.getLong(offset + 4));
        entity.setPhraseInterval(cursor.getFloat(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LessonPhrase entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LessonPhrase entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "lessonToManyLessonPhrases" to-many relationship of Lesson. */
    public List<LessonPhrase> _queryLesson_LessonToManyLessonPhrases(long lessonId) {
        synchronized (this) {
            if (lesson_LessonToManyLessonPhrasesQuery == null) {
                QueryBuilder<LessonPhrase> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LessonId.eq(null));
                queryBuilder.orderRaw("LESSON_ORDER ASC");
                lesson_LessonToManyLessonPhrasesQuery = queryBuilder.build();
            }
        }
        Query<LessonPhrase> query = lesson_LessonToManyLessonPhrasesQuery.forCurrentThread();
        query.setParameter(0, lessonId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLessonDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getLanguageXrefDao().getAllColumns());
            builder.append(" FROM LESSON_PHRASE T");
            builder.append(" LEFT JOIN LESSON T0 ON T.'LESSON_ID'=T0.'_id'");
            builder.append(" LEFT JOIN LANGUAGE_XREF T1 ON T.'LANGUAGE_XREF_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected LessonPhrase loadCurrentDeep(Cursor cursor, boolean lock) {
        LessonPhrase entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Lesson lessonPhraseToLesson = loadCurrentOther(daoSession.getLessonDao(), cursor, offset);
         if(lessonPhraseToLesson != null) {
            entity.setLessonPhraseToLesson(lessonPhraseToLesson);
        }
        offset += daoSession.getLessonDao().getAllColumns().length;

        LanguageXref lessonPhraseToOneLanguageXref = loadCurrentOther(daoSession.getLanguageXrefDao(), cursor, offset);
         if(lessonPhraseToOneLanguageXref != null) {
            entity.setLessonPhraseToOneLanguageXref(lessonPhraseToOneLanguageXref);
        }

        return entity;    
    }

    public LessonPhrase loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<LessonPhrase> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<LessonPhrase> list = new ArrayList<LessonPhrase>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<LessonPhrase> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<LessonPhrase> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
