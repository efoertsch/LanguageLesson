package com.fisincorporated.languagetutorial.db;

import com.fisincorporated.languagetutorial.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table COMPOUND_PHRASE.
 */
public class CompoundPhrase {

    private Long id;
    private long compoundPhraseId;
    private int phraseOrder;
    private Long languagePhraseId;
    private float phraseInterval;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CompoundPhraseDao myDao;

    private LanguagePhrase compoundPhraseToOneLanguagePhrase;
    private Long compoundPhraseToOneLanguagePhrase__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CompoundPhrase() {
    }

    public CompoundPhrase(Long id) {
        this.id = id;
    }

    public CompoundPhrase(Long id, long compoundPhraseId, int phraseOrder, Long languagePhraseId, float phraseInterval) {
        this.id = id;
        this.compoundPhraseId = compoundPhraseId;
        this.phraseOrder = phraseOrder;
        this.languagePhraseId = languagePhraseId;
        this.phraseInterval = phraseInterval;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCompoundPhraseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getCompoundPhraseId() {
        return compoundPhraseId;
    }

    public void setCompoundPhraseId(long compoundPhraseId) {
        this.compoundPhraseId = compoundPhraseId;
    }

    public int getPhraseOrder() {
        return phraseOrder;
    }

    public void setPhraseOrder(int phraseOrder) {
        this.phraseOrder = phraseOrder;
    }

    public Long getLanguagePhraseId() {
        return languagePhraseId;
    }

    public void setLanguagePhraseId(Long languagePhraseId) {
        this.languagePhraseId = languagePhraseId;
    }

    public float getPhraseInterval() {
        return phraseInterval;
    }

    public void setPhraseInterval(float phraseInterval) {
        this.phraseInterval = phraseInterval;
    }

    /** To-one relationship, resolved on first access. */
    public LanguagePhrase getCompoundPhraseToOneLanguagePhrase() {
        Long __key = this.languagePhraseId;
        if (compoundPhraseToOneLanguagePhrase__resolvedKey == null || !compoundPhraseToOneLanguagePhrase__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguagePhraseDao targetDao = daoSession.getLanguagePhraseDao();
            LanguagePhrase compoundPhraseToOneLanguagePhraseNew = targetDao.load(__key);
            synchronized (this) {
                compoundPhraseToOneLanguagePhrase = compoundPhraseToOneLanguagePhraseNew;
            	compoundPhraseToOneLanguagePhrase__resolvedKey = __key;
            }
        }
        return compoundPhraseToOneLanguagePhrase;
    }

    public void setCompoundPhraseToOneLanguagePhrase(LanguagePhrase compoundPhraseToOneLanguagePhrase) {
        synchronized (this) {
            this.compoundPhraseToOneLanguagePhrase = compoundPhraseToOneLanguagePhrase;
            languagePhraseId = compoundPhraseToOneLanguagePhrase == null ? null : compoundPhraseToOneLanguagePhrase.getId();
            compoundPhraseToOneLanguagePhrase__resolvedKey = languagePhraseId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
