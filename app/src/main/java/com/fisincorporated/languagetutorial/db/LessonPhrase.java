package com.fisincorporated.languagetutorial.db;

import com.fisincorporated.languagetutorial.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table LESSON_PHRASE.
 */
public class LessonPhrase {

    private Long id;
    private long lessonId;
    private int lessonOrder;
    private int speaker;
    private long languageXrefId;
    private float phraseInterval;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LessonPhraseDao myDao;

    private Lesson lessonPhraseToLesson;
    private Long lessonPhraseToLesson__resolvedKey;

    private LanguageXref lessonPhraseToOneLanguageXref;
    private Long lessonPhraseToOneLanguageXref__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public LessonPhrase() {
    }

    public LessonPhrase(Long id) {
        this.id = id;
    }

    public LessonPhrase(Long id, long lessonId, int lessonOrder, int speaker, long languageXrefId, float phraseInterval) {
        this.id = id;
        this.lessonId = lessonId;
        this.lessonOrder = lessonOrder;
        this.speaker = speaker;
        this.languageXrefId = languageXrefId;
        this.phraseInterval = phraseInterval;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLessonPhraseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getLessonId() {
        return lessonId;
    }

    public void setLessonId(long lessonId) {
        this.lessonId = lessonId;
    }

    public int getLessonOrder() {
        return lessonOrder;
    }

    public void setLessonOrder(int lessonOrder) {
        this.lessonOrder = lessonOrder;
    }

    public int getSpeaker() {
        return speaker;
    }

    public void setSpeaker(int speaker) {
        this.speaker = speaker;
    }

    public long getLanguageXrefId() {
        return languageXrefId;
    }

    public void setLanguageXrefId(long languageXrefId) {
        this.languageXrefId = languageXrefId;
    }

    public float getPhraseInterval() {
        return phraseInterval;
    }

    public void setPhraseInterval(float phraseInterval) {
        this.phraseInterval = phraseInterval;
    }

    /** To-one relationship, resolved on first access. */
    public Lesson getLessonPhraseToLesson() {
        long __key = this.lessonId;
        if (lessonPhraseToLesson__resolvedKey == null || !lessonPhraseToLesson__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LessonDao targetDao = daoSession.getLessonDao();
            Lesson lessonPhraseToLessonNew = targetDao.load(__key);
            synchronized (this) {
                lessonPhraseToLesson = lessonPhraseToLessonNew;
            	lessonPhraseToLesson__resolvedKey = __key;
            }
        }
        return lessonPhraseToLesson;
    }

    public void setLessonPhraseToLesson(Lesson lessonPhraseToLesson) {
        if (lessonPhraseToLesson == null) {
            throw new DaoException("To-one property 'lessonId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.lessonPhraseToLesson = lessonPhraseToLesson;
            lessonId = lessonPhraseToLesson.getId();
            lessonPhraseToLesson__resolvedKey = lessonId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public LanguageXref getLessonPhraseToOneLanguageXref() {
        long __key = this.languageXrefId;
        if (lessonPhraseToOneLanguageXref__resolvedKey == null || !lessonPhraseToOneLanguageXref__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguageXrefDao targetDao = daoSession.getLanguageXrefDao();
            LanguageXref lessonPhraseToOneLanguageXrefNew = targetDao.load(__key);
            synchronized (this) {
                lessonPhraseToOneLanguageXref = lessonPhraseToOneLanguageXrefNew;
            	lessonPhraseToOneLanguageXref__resolvedKey = __key;
            }
        }
        return lessonPhraseToOneLanguageXref;
    }

    public void setLessonPhraseToOneLanguageXref(LanguageXref lessonPhraseToOneLanguageXref) {
        if (lessonPhraseToOneLanguageXref == null) {
            throw new DaoException("To-one property 'languageXrefId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.lessonPhraseToOneLanguageXref = lessonPhraseToOneLanguageXref;
            languageXrefId = lessonPhraseToOneLanguageXref.getId();
            lessonPhraseToOneLanguageXref__resolvedKey = languageXrefId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
