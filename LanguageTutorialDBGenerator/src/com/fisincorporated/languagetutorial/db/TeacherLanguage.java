package com.fisincorporated.languagetutorial.db;

import java.util.List;
import com.fisincorporated.languagetutorial.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table TEACHER_LANGUAGE.
 */
public class TeacherLanguage {

    private Long id;
    private long teacherId;
    private long learningLanguageId;
    private String learningLanguageMediaDirectory;
    private Long knownLanguageId;
    private String knownLanguageMediaDirectory;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TeacherLanguageDao myDao;

    private Teacher teacher;
    private Long teacher__resolvedKey;

    private LanguageCode learningLanguageCheck;
    private Long learningLanguageCheck__resolvedKey;

    private LanguageCode knownLanguageCheck;
    private Long knownLanguageCheck__resolvedKey;

    private List<ClassName> teacherLanguageToClasses;
    private List<LanguageXref> TeacherLanguageToManyLanguageXrefs;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public TeacherLanguage() {
    }

    public TeacherLanguage(Long id) {
        this.id = id;
    }

    public TeacherLanguage(Long id, long teacherId, long learningLanguageId, String learningLanguageMediaDirectory, Long knownLanguageId, String knownLanguageMediaDirectory) {
        this.id = id;
        this.teacherId = teacherId;
        this.learningLanguageId = learningLanguageId;
        this.learningLanguageMediaDirectory = learningLanguageMediaDirectory;
        this.knownLanguageId = knownLanguageId;
        this.knownLanguageMediaDirectory = knownLanguageMediaDirectory;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTeacherLanguageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getTeacherId() {
        return teacherId;
    }

    public void setTeacherId(long teacherId) {
        this.teacherId = teacherId;
    }

    public long getLearningLanguageId() {
        return learningLanguageId;
    }

    public void setLearningLanguageId(long learningLanguageId) {
        this.learningLanguageId = learningLanguageId;
    }

    public String getLearningLanguageMediaDirectory() {
        return learningLanguageMediaDirectory;
    }

    public void setLearningLanguageMediaDirectory(String learningLanguageMediaDirectory) {
        this.learningLanguageMediaDirectory = learningLanguageMediaDirectory;
    }

    public Long getKnownLanguageId() {
        return knownLanguageId;
    }

    public void setKnownLanguageId(Long knownLanguageId) {
        this.knownLanguageId = knownLanguageId;
    }

    public String getKnownLanguageMediaDirectory() {
        return knownLanguageMediaDirectory;
    }

    public void setKnownLanguageMediaDirectory(String knownLanguageMediaDirectory) {
        this.knownLanguageMediaDirectory = knownLanguageMediaDirectory;
    }

    /** To-one relationship, resolved on first access. */
    public Teacher getTeacher() {
        long __key = this.teacherId;
        if (teacher__resolvedKey == null || !teacher__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeacherDao targetDao = daoSession.getTeacherDao();
            Teacher teacherNew = targetDao.load(__key);
            synchronized (this) {
                teacher = teacherNew;
            	teacher__resolvedKey = __key;
            }
        }
        return teacher;
    }

    public void setTeacher(Teacher teacher) {
        if (teacher == null) {
            throw new DaoException("To-one property 'teacherId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.teacher = teacher;
            teacherId = teacher.getId();
            teacher__resolvedKey = teacherId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public LanguageCode getLearningLanguageCheck() {
        long __key = this.learningLanguageId;
        if (learningLanguageCheck__resolvedKey == null || !learningLanguageCheck__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguageCodeDao targetDao = daoSession.getLanguageCodeDao();
            LanguageCode learningLanguageCheckNew = targetDao.load(__key);
            synchronized (this) {
                learningLanguageCheck = learningLanguageCheckNew;
            	learningLanguageCheck__resolvedKey = __key;
            }
        }
        return learningLanguageCheck;
    }

    public void setLearningLanguageCheck(LanguageCode learningLanguageCheck) {
        if (learningLanguageCheck == null) {
            throw new DaoException("To-one property 'learningLanguageId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.learningLanguageCheck = learningLanguageCheck;
            learningLanguageId = learningLanguageCheck.getId();
            learningLanguageCheck__resolvedKey = learningLanguageId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public LanguageCode getKnownLanguageCheck() {
        Long __key = this.knownLanguageId;
        if (knownLanguageCheck__resolvedKey == null || !knownLanguageCheck__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguageCodeDao targetDao = daoSession.getLanguageCodeDao();
            LanguageCode knownLanguageCheckNew = targetDao.load(__key);
            synchronized (this) {
                knownLanguageCheck = knownLanguageCheckNew;
            	knownLanguageCheck__resolvedKey = __key;
            }
        }
        return knownLanguageCheck;
    }

    public void setKnownLanguageCheck(LanguageCode knownLanguageCheck) {
        synchronized (this) {
            this.knownLanguageCheck = knownLanguageCheck;
            knownLanguageId = knownLanguageCheck == null ? null : knownLanguageCheck.getId();
            knownLanguageCheck__resolvedKey = knownLanguageId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ClassName> getTeacherLanguageToClasses() {
        if (teacherLanguageToClasses == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClassNameDao targetDao = daoSession.getClassNameDao();
            List<ClassName> teacherLanguageToClassesNew = targetDao._queryTeacherLanguage_TeacherLanguageToClasses(id);
            synchronized (this) {
                if(teacherLanguageToClasses == null) {
                    teacherLanguageToClasses = teacherLanguageToClassesNew;
                }
            }
        }
        return teacherLanguageToClasses;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTeacherLanguageToClasses() {
        teacherLanguageToClasses = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LanguageXref> getTeacherLanguageToManyLanguageXrefs() {
        if (TeacherLanguageToManyLanguageXrefs == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LanguageXrefDao targetDao = daoSession.getLanguageXrefDao();
            List<LanguageXref> TeacherLanguageToManyLanguageXrefsNew = targetDao._queryTeacherLanguage_TeacherLanguageToManyLanguageXrefs(id);
            synchronized (this) {
                if(TeacherLanguageToManyLanguageXrefs == null) {
                    TeacherLanguageToManyLanguageXrefs = TeacherLanguageToManyLanguageXrefsNew;
                }
            }
        }
        return TeacherLanguageToManyLanguageXrefs;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTeacherLanguageToManyLanguageXrefs() {
        TeacherLanguageToManyLanguageXrefs = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
