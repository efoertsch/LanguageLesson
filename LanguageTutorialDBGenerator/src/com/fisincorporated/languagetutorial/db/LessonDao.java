package com.fisincorporated.languagetutorial.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.fisincorporated.languagetutorial.db.Lesson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LESSON.
*/
public class LessonDao extends AbstractDao<Lesson, Long> {

    public static final String TABLENAME = "LESSON";

    /**
     * Properties of entity Lesson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ClassId = new Property(1, long.class, "classId", false, "CLASS_ID");
        public final static Property LessonOrder = new Property(2, int.class, "lessonOrder", false, "LESSON_ORDER");
        public final static Property LessonTitle = new Property(3, String.class, "lessonTitle", false, "LESSON_TITLE");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property LessonType = new Property(5, String.class, "lessonType", false, "LESSON_TYPE");
    };

    private DaoSession daoSession;

    private Query<Lesson> className_ClassToLessonsQuery;

    public LessonDao(DaoConfig config) {
        super(config);
    }
    
    public LessonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LESSON' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CLASS_ID' INTEGER NOT NULL ," + // 1: classId
                "'LESSON_ORDER' INTEGER NOT NULL ," + // 2: lessonOrder
                "'LESSON_TITLE' TEXT," + // 3: lessonTitle
                "'DESCRIPTION' TEXT," + // 4: description
                "'LESSON_TYPE' TEXT);"); // 5: lessonType
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_LESSON_CLASS_ID ON LESSON" +
                " (CLASS_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LESSON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Lesson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getClassId());
        stmt.bindLong(3, entity.getLessonOrder());
 
        String lessonTitle = entity.getLessonTitle();
        if (lessonTitle != null) {
            stmt.bindString(4, lessonTitle);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String lessonType = entity.getLessonType();
        if (lessonType != null) {
            stmt.bindString(6, lessonType);
        }
    }

    @Override
    protected void attachEntity(Lesson entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Lesson readEntity(Cursor cursor, int offset) {
        Lesson entity = new Lesson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // classId
            cursor.getInt(offset + 2), // lessonOrder
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lessonTitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // lessonType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Lesson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClassId(cursor.getLong(offset + 1));
        entity.setLessonOrder(cursor.getInt(offset + 2));
        entity.setLessonTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLessonType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Lesson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Lesson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "ClassToLessons" to-many relationship of ClassName. */
    public List<Lesson> _queryClassName_ClassToLessons(long classId) {
        synchronized (this) {
            if (className_ClassToLessonsQuery == null) {
                QueryBuilder<Lesson> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ClassId.eq(null));
                queryBuilder.orderRaw("LESSON_ORDER ASC");
                className_ClassToLessonsQuery = queryBuilder.build();
            }
        }
        Query<Lesson> query = className_ClassToLessonsQuery.forCurrentThread();
        query.setParameter(0, classId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getClassNameDao().getAllColumns());
            builder.append(" FROM LESSON T");
            builder.append(" LEFT JOIN CLASS_NAME T0 ON T.'CLASS_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Lesson loadCurrentDeep(Cursor cursor, boolean lock) {
        Lesson entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ClassName className = loadCurrentOther(daoSession.getClassNameDao(), cursor, offset);
         if(className != null) {
            entity.setClassName(className);
        }

        return entity;    
    }

    public Lesson loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Lesson> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Lesson> list = new ArrayList<Lesson>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Lesson> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Lesson> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
