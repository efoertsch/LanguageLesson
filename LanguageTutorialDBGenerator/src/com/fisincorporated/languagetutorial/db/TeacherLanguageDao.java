package com.fisincorporated.languagetutorial.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.fisincorporated.languagetutorial.db.TeacherLanguage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TEACHER_LANGUAGE.
*/
public class TeacherLanguageDao extends AbstractDao<TeacherLanguage, Long> {

    public static final String TABLENAME = "TEACHER_LANGUAGE";

    /**
     * Properties of entity TeacherLanguage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TeacherId = new Property(1, long.class, "teacherId", false, "TEACHER_ID");
        public final static Property LearningLanguageId = new Property(2, long.class, "learningLanguageId", false, "LEARNING_LANGUAGE_ID");
        public final static Property LearningLanguageMediaDirectory = new Property(3, String.class, "learningLanguageMediaDirectory", false, "LEARNING_LANGUAGE_MEDIA_DIRECTORY");
        public final static Property KnownLanguageId = new Property(4, Long.class, "knownLanguageId", false, "KNOWN_LANGUAGE_ID");
        public final static Property KnownLanguageMediaDirectory = new Property(5, String.class, "knownLanguageMediaDirectory", false, "KNOWN_LANGUAGE_MEDIA_DIRECTORY");
    };

    private DaoSession daoSession;

    private Query<TeacherLanguage> teacher_TeacherToLanguageQuery;

    public TeacherLanguageDao(DaoConfig config) {
        super(config);
    }
    
    public TeacherLanguageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TEACHER_LANGUAGE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TEACHER_ID' INTEGER NOT NULL ," + // 1: teacherId
                "'LEARNING_LANGUAGE_ID' INTEGER NOT NULL ," + // 2: learningLanguageId
                "'LEARNING_LANGUAGE_MEDIA_DIRECTORY' TEXT," + // 3: learningLanguageMediaDirectory
                "'KNOWN_LANGUAGE_ID' INTEGER," + // 4: knownLanguageId
                "'KNOWN_LANGUAGE_MEDIA_DIRECTORY' TEXT);"); // 5: knownLanguageMediaDirectory
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_TEACHER_LANGUAGE_TEACHER_ID ON TEACHER_LANGUAGE" +
                " (TEACHER_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_TEACHER_LANGUAGE_LEARNING_LANGUAGE_ID ON TEACHER_LANGUAGE" +
                " (LEARNING_LANGUAGE_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_TEACHER_LANGUAGE_KNOWN_LANGUAGE_ID ON TEACHER_LANGUAGE" +
                " (KNOWN_LANGUAGE_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEACHER_LANGUAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TeacherLanguage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTeacherId());
        stmt.bindLong(3, entity.getLearningLanguageId());
 
        String learningLanguageMediaDirectory = entity.getLearningLanguageMediaDirectory();
        if (learningLanguageMediaDirectory != null) {
            stmt.bindString(4, learningLanguageMediaDirectory);
        }
 
        Long knownLanguageId = entity.getKnownLanguageId();
        if (knownLanguageId != null) {
            stmt.bindLong(5, knownLanguageId);
        }
 
        String knownLanguageMediaDirectory = entity.getKnownLanguageMediaDirectory();
        if (knownLanguageMediaDirectory != null) {
            stmt.bindString(6, knownLanguageMediaDirectory);
        }
    }

    @Override
    protected void attachEntity(TeacherLanguage entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TeacherLanguage readEntity(Cursor cursor, int offset) {
        TeacherLanguage entity = new TeacherLanguage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // teacherId
            cursor.getLong(offset + 2), // learningLanguageId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // learningLanguageMediaDirectory
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // knownLanguageId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // knownLanguageMediaDirectory
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TeacherLanguage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTeacherId(cursor.getLong(offset + 1));
        entity.setLearningLanguageId(cursor.getLong(offset + 2));
        entity.setLearningLanguageMediaDirectory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKnownLanguageId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setKnownLanguageMediaDirectory(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TeacherLanguage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TeacherLanguage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "teacherToLanguage" to-many relationship of Teacher. */
    public List<TeacherLanguage> _queryTeacher_TeacherToLanguage(long teacherId) {
        synchronized (this) {
            if (teacher_TeacherToLanguageQuery == null) {
                QueryBuilder<TeacherLanguage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TeacherId.eq(null));
                teacher_TeacherToLanguageQuery = queryBuilder.build();
            }
        }
        Query<TeacherLanguage> query = teacher_TeacherToLanguageQuery.forCurrentThread();
        query.setParameter(0, teacherId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTeacherDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getLanguageCodeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getLanguageCodeDao().getAllColumns());
            builder.append(" FROM TEACHER_LANGUAGE T");
            builder.append(" LEFT JOIN TEACHER T0 ON T.'TEACHER_ID'=T0.'_id'");
            builder.append(" LEFT JOIN LANGUAGE_CODE T1 ON T.'LEARNING_LANGUAGE_ID'=T1.'_id'");
            builder.append(" LEFT JOIN LANGUAGE_CODE T2 ON T.'KNOWN_LANGUAGE_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TeacherLanguage loadCurrentDeep(Cursor cursor, boolean lock) {
        TeacherLanguage entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Teacher teacher = loadCurrentOther(daoSession.getTeacherDao(), cursor, offset);
         if(teacher != null) {
            entity.setTeacher(teacher);
        }
        offset += daoSession.getTeacherDao().getAllColumns().length;

        LanguageCode learningLanguageCheck = loadCurrentOther(daoSession.getLanguageCodeDao(), cursor, offset);
         if(learningLanguageCheck != null) {
            entity.setLearningLanguageCheck(learningLanguageCheck);
        }
        offset += daoSession.getLanguageCodeDao().getAllColumns().length;

        LanguageCode knownLanguageCheck = loadCurrentOther(daoSession.getLanguageCodeDao(), cursor, offset);
        entity.setKnownLanguageCheck(knownLanguageCheck);

        return entity;    
    }

    public TeacherLanguage loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TeacherLanguage> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TeacherLanguage> list = new ArrayList<TeacherLanguage>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TeacherLanguage> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TeacherLanguage> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
